// Mocks generated by Mockito 5.4.6 from annotations
// in nfc_guard/test/presentation/providers/auth_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:nfc_guard/core/utils/code_generator.dart' as _i11;
import 'package:nfc_guard/data/datasources/secure_storage_service.dart' as _i4;
import 'package:nfc_guard/data/models/user_model.dart' as _i6;
import 'package:search_cep/src/errors/errors.dart' as _i9;
import 'package:search_cep/src/via_cep/via_cep_info.dart' as _i10;
import 'package:search_cep/src/via_cep/via_cep_search_cep.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i4.SecureStorageService {
  MockSecureStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveUser(_i6.UserModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i6.UserModel?> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue: _i5.Future<_i6.UserModel?>.value(),
          )
          as _i5.Future<_i6.UserModel?>);

  @override
  _i5.Future<void> saveUsedCodes(List<String>? codes) =>
      (super.noSuchMethod(
            Invocation.method(#saveUsedCodes, [codes]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<String>> getUsedCodes() =>
      (super.noSuchMethod(
            Invocation.method(#getUsedCodes, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<void> addUsedCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#addUsedCode, [code]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isCodeUsed(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#isCodeUsed, [code]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> deleteUser() =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> clearStorage() =>
      (super.noSuchMethod(
            Invocation.method(#clearStorage, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> storeValue(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#storeValue, [key, value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getValue(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getValue, [key]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> deleteKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#deleteKey, [key]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> hasKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#hasKey, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, String>> getAllValues() =>
      (super.noSuchMethod(
            Invocation.method(#getAllValues, []),
            returnValue: _i5.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i5.Future<Map<String, String>>);
}

/// A class which mocks [ViaCepSearchCep].
///
/// See the documentation for Mockito's code generation for more information.
class MockViaCepSearchCep extends _i1.Mock implements _i7.ViaCepSearchCep {
  MockViaCepSearchCep() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  int get ok =>
      (super.noSuchMethod(Invocation.getter(#ok), returnValue: 0) as int);

  @override
  int get badRequest =>
      (super.noSuchMethod(Invocation.getter(#badRequest), returnValue: 0)
          as int);

  @override
  _i2.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_0(this, Invocation.getter(#client)),
          )
          as _i2.Client);

  @override
  _i5.Future<_i3.Either<_i9.SearchCepError, _i10.ViaCepInfo>> searchInfoByCep({
    required String? cep,
    _i7.SearchInfoType? returnType = _i7.SearchInfoType.json,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchInfoByCep, [], {
              #cep: cep,
              #returnType: returnType,
            }),
            returnValue:
                _i5.Future<
                  _i3.Either<_i9.SearchCepError, _i10.ViaCepInfo>
                >.value(
                  _FakeEither_1<_i9.SearchCepError, _i10.ViaCepInfo>(
                    this,
                    Invocation.method(#searchInfoByCep, [], {
                      #cep: cep,
                      #returnType: returnType,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i9.SearchCepError, _i10.ViaCepInfo>>);

  @override
  _i5.Future<_i3.Either<_i9.SearchCepError, List<_i10.ViaCepInfo>>>
  searchForCeps({
    required String? uf,
    required String? cidade,
    required String? logradouro,
    _i7.SearchCepsType? returnType = _i7.SearchCepsType.json,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchForCeps, [], {
              #uf: uf,
              #cidade: cidade,
              #logradouro: logradouro,
              #returnType: returnType,
            }),
            returnValue:
                _i5.Future<
                  _i3.Either<_i9.SearchCepError, List<_i10.ViaCepInfo>>
                >.value(
                  _FakeEither_1<_i9.SearchCepError, List<_i10.ViaCepInfo>>(
                    this,
                    Invocation.method(#searchForCeps, [], {
                      #uf: uf,
                      #cidade: cidade,
                      #logradouro: logradouro,
                      #returnType: returnType,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i9.SearchCepError, List<_i10.ViaCepInfo>>>);
}

/// A class which mocks [CodeGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCodeGenerator extends _i1.Mock implements _i11.CodeGenerator {
  MockCodeGenerator() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [ViaCepInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockViaCepInfo extends _i1.Mock implements _i10.ViaCepInfo {
  MockViaCepInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set cep(String? _cep) => super.noSuchMethod(
    Invocation.setter(#cep, _cep),
    returnValueForMissingStub: null,
  );

  @override
  set logradouro(String? _logradouro) => super.noSuchMethod(
    Invocation.setter(#logradouro, _logradouro),
    returnValueForMissingStub: null,
  );

  @override
  set complemento(String? _complemento) => super.noSuchMethod(
    Invocation.setter(#complemento, _complemento),
    returnValueForMissingStub: null,
  );

  @override
  set bairro(String? _bairro) => super.noSuchMethod(
    Invocation.setter(#bairro, _bairro),
    returnValueForMissingStub: null,
  );

  @override
  set localidade(String? _localidade) => super.noSuchMethod(
    Invocation.setter(#localidade, _localidade),
    returnValueForMissingStub: null,
  );

  @override
  set uf(String? _uf) => super.noSuchMethod(
    Invocation.setter(#uf, _uf),
    returnValueForMissingStub: null,
  );

  @override
  set unidade(String? _unidade) => super.noSuchMethod(
    Invocation.setter(#unidade, _unidade),
    returnValueForMissingStub: null,
  );

  @override
  set ibge(String? _ibge) => super.noSuchMethod(
    Invocation.setter(#ibge, _ibge),
    returnValueForMissingStub: null,
  );

  @override
  set gia(String? _gia) => super.noSuchMethod(
    Invocation.setter(#gia, _gia),
    returnValueForMissingStub: null,
  );
}
